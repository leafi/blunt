package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _assets_rules_md = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4f\x6f\xdc\xbe\x15\xbc\xe7\x53\xbc\xa2\x07\x27\xc6\x7a\xdd\xa2\x3f\xb4\x68\x2e\x81\xe3\xa4\x8e\x81\x24\x0e\x12\xa7\x41\x11\x14\x30\x25\x3d\x49\xcc\x52\xa4\x4a\x52\xde\xa8\x07\x7f\xf6\xce\x90\x6b\xc7\xcd\xa1\xb9\xf4\xb6\x2b\x91\xef\xcf\xbc\x99\x79\xfa\xbd\x7c\x5c\x9c\xa6\x27\x4f\x8e\xe5\xda\xec\x54\x8c\x74\xaa\xb3\x34\x51\x4d\x1e\xb7\xf2\x2a\xf8\xa3\x2c\xfb\x10\xe3\xba\x95\x8f\xea\xd4\x24\x95\x3c\x9a\xfc\x70\xe2\x8b\x1e\x45\x5c\x73\x4e\x46\xd3\xee\xd2\x56\xae\xe3\x2a\xc6\x77\xf8\x7b\xab\x92\xc2\xa4\xd2\x2f\x7e\x23\xab\x9a\xf1\x05\xb2\x7c\x19\xd5\x1f\x25\xc4\x50\x71\x26\x65\xc9\x16\x27\xd6\xb0\xc8\x3e\x86\x7c\xb8\x30\x2d\xc9\xb6\x2f\xe4\x52\x76\x3e\xec\xc5\x87\x93\xe0\x55\xd4\x21\xb5\xb3\x3b\x4d\x3c\x1e\xeb\xa1\x8d\x34\x4b\x2e\x05\x21\x66\xd8\x19\x54\x79\xc9\x9f\x48\x29\x39\xe0\x6a\x96\x36\x74\x28\x39\x84\xad\xfc\x03\x59\x0c\x8b\x95\x96\xc5\x5b\xd4\x87\x46\x46\x35\x31\xe3\x9a\x34\xea\xac\xe2\x99\xf5\x4c\xb0\x45\xad\x2f\x71\x6c\x57\x7a\x0b\x3d\x2b\x46\x01\x91\x68\xf1\x1a\xa1\xc8\x12\x7c\xab\x3c\x59\x71\x4a\xd9\xb6\x3b\x09\x0b\xc2\x9d\x07\xdf\x87\x38\xd9\xbc\x8a\x3d\x14\x6c\x7d\x29\x81\x70\xcd\xce\xac\xd6\x0f\x15\x85\x80\x1f\x83\x99\x14\xd0\xe1\x2f\x52\x3a\xb7\x6e\xe4\xb8\xfe\x38\x7e\xf4\x1e\x79\x2e\x82\x33\xf8\x8b\x90\xdf\x16\xa4\x8f\xea\xcc\x77\xed\xe4\x7c\x83\x90\x4b\x92\x76\x34\xde\x03\xa8\x1a\x6a\x30\xb1\x31\x83\x02\x01\xe7\xb4\xcd\x21\xf2\x1e\x52\x46\xe2\x21\x13\xc7\x6d\xb3\xa0\x0f\xa0\x76\x33\x04\xe9\xa7\x7c\x53\x1e\x27\x3e\x67\xdb\x2e\x84\x9d\x44\x3b\x8c\xf9\xbf\x93\x13\x57\xd6\x5e\x5e\x09\x9f\x2e\x4c\x84\xa8\x05\x6d\x56\x9b\x4a\xbf\xaf\x42\x09\xe5\xd7\x3d\x46\x43\x44\xdd\xe2\x33\x47\x07\x02\xa9\x2c\x09\xb5\x07\xef\x56\x01\x56\xf5\xd6\x56\xae\x58\xe1\xde\xa6\x52\xdc\x64\x56\x49\x76\x9a\x71\x44\xbf\xcf\x0e\xc1\x19\xe5\xb2\x67\xc8\x3c\x12\x42\xf2\x70\x97\x36\x3c\x7c\x0f\x74\x6f\x16\x87\x11\xd4\x5c\x78\x38\x6b\xec\xd1\xff\xe3\x24\xef\xcc\xda\x1c\x68\x47\x38\xd8\xcf\x3e\xda\xcc\x80\xa6\x9c\x21\x55\xbf\x7e\xd4\x39\xc4\xfc\xa3\x83\x7f\x3e\x1d\x73\x9e\xd3\xf3\xd3\xd3\xc1\xe6\x71\x69\xb6\x6d\x98\x4e\x41\x84\xde\x9e\x36\x4c\xf6\x0c\x49\xc9\x9f\xce\x0e\xde\xf8\x5c\x19\x77\xcc\x0c\xc7\x3f\x85\xdf\xca\x99\x0c\x21\xb0\x7b\xfd\x1d\x52\xf1\xe0\xde\x02\x71\xaf\x80\x84\xd3\x09\x9d\xed\xd7\xda\xc3\x56\x3e\x51\x80\x9b\x52\x6f\x99\x3b\x8f\x12\x88\x4f\x4b\x03\x8a\xc9\xd7\x79\xc1\xd5\xa8\xff\x5a\x34\xe5\xf4\xcb\x2a\x19\x9f\xd3\x33\x4b\x1e\x01\x49\xe1\x36\x60\x02\x3c\xbb\x8d\x40\x01\xbe\x20\x55\x26\x79\x29\x5d\x75\x80\xd2\xce\xe5\x11\xd2\xcc\x4b\x41\x04\x2a\xf9\x31\xd6\x37\xd4\x3a\xab\x6b\x14\xb7\x43\x93\x72\x54\xa0\x1e\x40\xc9\x1c\x3a\xb3\x12\xcd\xab\x25\x27\x4c\xa7\x55\xd9\xd3\x3f\x78\xba\x34\x4b\x01\xb7\x86\x49\x3a\x68\xf4\xad\xed\x95\x33\x4b\x23\x91\xa7\x8f\x94\x4a\x53\x52\xca\x2b\xc4\xf2\xb2\x85\x66\xe7\x03\x11\x18\xc7\xdc\x06\xdb\x81\x4d\x15\x5f\x24\x5f\x30\x6d\xe4\x47\x0f\xd0\xe7\x9c\x17\x03\x05\x37\xdf\xc0\x81\x0d\xe6\xcd\x6c\x32\x28\x19\x8c\x0a\x87\xb1\x64\x98\xcd\x42\x67\xb3\x24\x6e\x0e\x78\x0b\x12\xd2\x14\x68\x38\xd2\x58\xc4\x8d\x91\x5c\x74\xb6\xa5\xfe\x51\xd7\x04\x92\xd9\xd9\xa9\xdc\xdc\x5a\xdd\xa7\x1b\x8c\x12\xcf\x0f\x79\xee\x9d\xb3\xa9\x96\x25\xef\xac\xd7\x36\x9a\x1e\x2f\x3e\x7b\x38\x48\x61\xea\x21\xb8\xb2\xec\xb4\xb4\x08\x9c\xfa\xc5\x49\xb3\x72\x08\x70\xd1\x49\x73\xb4\x6d\xb5\xdb\xc9\xe4\xac\x31\xb1\xe9\xf7\x81\xd4\x19\x1c\xae\xf1\xef\x6b\x9e\xa5\x41\xde\xab\xca\x34\xae\x48\x91\x26\x53\x05\xe1\x83\x3f\xa9\xac\x3b\xe7\x50\x39\x5d\xaa\x1b\x07\x32\x4d\x0a\xea\x69\x10\x1e\x65\x65\xb8\x62\xf0\xf8\x8f\x5c\xd1\x32\x8e\x33\x73\x0e\xf3\xa1\x63\xdb\xc6\x00\x48\x53\x70\xd4\xd0\x87\x18\x6e\x6d\xa7\x65\x42\x40\x66\x99\x8b\x58\x70\x49\x3b\x94\x76\xa2\x1d\x1c\xe1\x6a\x56\x7f\xf1\x16\xda\xcd\xea\x13\x43\xb3\xe2\xab\xa7\x7f\x7c\x06\xb6\xfa\x0e\x13\x9a\x31\xda\x3a\x2a\x93\x75\x08\xe8\x1a\x74\x1c\xa2\x99\x47\xdb\x62\x6a\xc8\x86\x9b\xf4\x53\xf8\x13\x1e\xb8\xf4\xc0\x89\x8b\xf3\x62\xe6\xc9\x85\x3d\x69\xb3\xa3\x9d\xd4\x52\x0a\xad\x92\xc3\x3a\x62\xb6\x6b\x54\x1b\x11\x1c\x8c\xcd\xe5\x27\x2d\x9b\xc6\x44\xd1\xa7\x3d\xdc\x9f\xa7\x8e\x0e\x54\x4a\xca\xfd\xd0\x44\x6b\x68\xd8\xd5\xe4\x82\xe9\x36\x20\x67\xbd\x00\x34\x4a\x09\xc9\xac\xcf\x2b\x93\xc1\xb8\x91\xe0\x1e\x21\xcc\xd3\x97\xcb\xc1\x19\xb1\x27\xd8\x0a\x16\x91\xc7\x3e\x74\x10\x4a\x82\x6c\x01\xc0\xb3\x07\x1b\x24\xcd\x89\x5a\xaa\x92\xe7\xe8\xe4\xdd\xe5\xf5\x09\x39\xe6\xf9\x90\xc6\x85\xf9\x40\x7b\xc5\x34\x44\xfd\x00\x1e\x95\xf9\xc1\x0d\x35\x82\xad\xbe\x8e\x6c\x43\x23\x39\x09\x7d\x2f\x73\x0c\x24\x60\xc5\xa9\xe7\x8e\x6a\x4d\x1a\xc1\x77\x4f\x14\x70\x94\x2b\xbb\xe8\x99\x39\xa3\x76\x4b\xab\xa5\xe2\x1e\x5c\xe3\xfb\x32\x00\xcd\xc5\xac\xf6\x75\xb1\xd6\x8d\x18\xb9\x2a\xbb\x02\x23\x57\x68\x98\xe0\x04\x14\xc9\xc1\x84\x8c\x3c\x76\xa1\x52\x64\xb9\xe4\xd0\x8b\xf4\x8e\xb3\x02\x31\x20\xe1\xb2\x9c\xf0\xaf\xf8\x5d\x69\xba\x54\x38\x47\xfb\x6f\x0c\xe6\xeb\xff\x36\xaf\x5f\x9a\x5b\x75\x85\x02\x30\x2a\xef\x34\xc1\x8b\xcb\xde\x0b\x01\x7a\x9b\x8a\x09\x6f\x30\x46\x6c\x57\x90\x2f\x02\xa8\xba\xdb\x8b\xdf\x35\xfc\xbc\xd9\x8f\xe4\xb7\xa9\x22\xea\x17\x75\xb5\x8f\xb0\xf7\x87\x01\x6c\xe5\x42\xb9\xfa\xd1\x41\x1e\xe1\x85\xc5\x89\xf1\x49\xb1\xaf\xbc\xfc\xf0\x96\xc6\x51\x2d\x6d\x88\xf8\x80\x01\x9f\xc0\xb2\x0e\x48\x29\x3a\xbe\xbb\x9b\xd6\xbb\x3b\x61\xc8\x62\xb1\x9c\xd3\x8e\xdf\x5c\xbc\xdc\x99\xc9\xc3\xfb\xbd\x16\x5b\xfd\x5b\x68\xc1\xe9\x70\x40\xbf\xa5\xfb\x15\x1e\x60\x2d\xcf\x88\xb6\xb3\x58\xf6\x51\x9a\xf0\x1d\x62\xa4\xf6\x50\xaf\xbd\xfa\x74\xef\x3d\x98\x40\x75\x39\xf6\x86\x11\xc2\x52\xe7\x07\xf5\x78\x03\xcf\x41\xcd\x5a\x25\xf9\x9a\x02\xad\x6f\xee\x87\x74\x56\x39\xcb\xe5\xab\xe4\x19\x06\xdf\x5b\x6f\x21\xa4\xcf\x1e\x4e\x8d\x4b\x1f\x60\x48\x36\x95\xb4\x9d\x4d\x3b\x58\x1b\xd0\xbb\xb0\xdc\x57\x7f\x7f\x5f\x5d\x26\x66\x1c\x48\xcf\xe5\xac\x0b\x0d\xf1\x8c\x79\x89\x5a\x64\x3a\x01\x4c\xba\x6f\x75\xb4\xcd\xc3\xa6\x29\x9f\x7c\x45\x57\x97\x47\x13\x9e\xd1\xe5\xe4\x0c\xb5\x59\x2e\x08\x4d\x3c\x53\xcd\xf0\xd1\x02\x34\x1d\x8a\x06\x77\x31\xd3\xfa\x81\x06\x0f\x8d\xc6\xd6\x85\xc0\xf1\xa7\x05\x6a\x8c\x3f\x73\x34\x54\x81\x07\x7c\xc6\x58\xde\x45\xed\x6f\x40\xa9\xff\x07\x07\xf1\xe9\x00\x03\xd2\xc3\x66\xb5\x4e\x0f\x4b\x1c\xee\x8c\xef\xc3\x62\xbf\x7c\x45\xa6\x60\x2c\x7a\xbf\x96\xf0\x05\x59\x45\x01\x35\x62\x20\x98\xcd\x93\xbf\xfc\xe9\xaf\x00\x2e\x1b\xb7\x91\xdf\xfe\xf0\xdb\xf6\xcf\xff\x09\x00\x00\xff\xff\x48\x91\x47\xa1\xb2\x0b\x00\x00")

func assets_rules_md_bytes() ([]byte, error) {
	return bindata_read(
		_assets_rules_md,
		"assets/Rules.md",
	)
}

func assets_rules_md() (*asset, error) {
	bytes, err := assets_rules_md_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/Rules.md", size: 2994, mode: os.FileMode(420), modTime: time.Unix(1425078517, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_sprite_frag = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x2e\x4b\x2d\x2a\xce\xcc\xcf\x53\x30\x34\x35\xe0\xe2\xca\x2f\x2d\x51\x28\x4b\x4d\x36\x51\x00\x32\x9c\xf3\x73\xf2\x8b\xac\xb9\xb8\xca\xf2\x33\x53\x14\x72\x13\x33\xf3\x34\x34\xb9\xaa\xb9\x14\x80\x00\x26\xa9\x60\x0b\x56\xac\x61\xa0\x67\xaa\xa3\x00\x26\x0c\xf5\x0c\xc0\x84\xa6\x35\x57\x2d\x17\x20\x00\x00\xff\xff\x27\xcb\xa1\xd9\x5b\x00\x00\x00")

func assets_sprite_frag_bytes() ([]byte, error) {
	return bindata_read(
		_assets_sprite_frag,
		"assets/sprite.frag",
	)
}

func assets_sprite_frag() (*asset, error) {
	bytes, err := assets_sprite_frag_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/sprite.frag", size: 91, mode: os.FileMode(420), modTime: time.Unix(1425514841, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _assets_sprite_vert = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x52\x2e\x4b\x2d\x2a\xce\xcc\xcf\x53\x30\x34\x35\xe0\xe2\xca\xcc\x53\x28\x4b\x4d\x36\x52\x28\xc8\x2f\xce\x2c\x01\x8a\x5a\x73\x71\x95\xe5\x67\xa6\x28\xe4\x26\x66\xe6\x69\x68\x72\x55\x73\x29\x00\x41\x7a\x4e\x7c\x00\x54\x5e\xc1\x16\xa4\xde\x44\x03\xa6\x5e\x47\xc1\x40\xcf\x40\x47\xc1\x50\xcf\x40\xd3\x9a\xab\x96\x0b\x10\x00\x00\xff\xff\x38\x4d\xce\x71\x5d\x00\x00\x00")

func assets_sprite_vert_bytes() ([]byte, error) {
	return bindata_read(
		_assets_sprite_vert,
		"assets/sprite.vert",
	)
}

func assets_sprite_vert() (*asset, error) {
	bytes, err := assets_sprite_vert_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "assets/sprite.vert", size: 93, mode: os.FileMode(420), modTime: time.Unix(1425514822, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Rules.md": assets_rules_md,
	"assets/sprite.frag": assets_sprite_frag,
	"assets/sprite.vert": assets_sprite_vert,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"assets": &_bintree_t{nil, map[string]*_bintree_t{
		"Rules.md": &_bintree_t{assets_rules_md, map[string]*_bintree_t{
		}},
		"sprite.frag": &_bintree_t{assets_sprite_frag, map[string]*_bintree_t{
		}},
		"sprite.vert": &_bintree_t{assets_sprite_vert, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

